# Cyclistic Case Study

### Scenario

Cyclistic is a bike-share company in Chicago. People can acquire single-ride passes and full-day passes, which are known to be **casual riders**. They can also buy annual memberships and be known as **cyclistic members**.

The marketing director believes the company's future success depends on maximizing annual memberships. She believes converting casual riders into members is the key.

### Business Task

Identify trends and understand how annual members and casual riders differ by analyzing 12 months of historical bike trip data.

### Data sources

All data sources came from Cyclistic's historical bike trip data. 12 consecutive months were studied starting from the second quarter of 2019. The datasets can be found in here: <https://divvy-tripdata.s3.amazonaws.com/index.html>. Data was organized in different time ranges; some files were divided by month and some by trimesters.

There were no issues with bias or credibility in this data. It was verified to be reliable, original, comprehensive, current and cited. Furthermore, these sources are publicly available provided by Cyclistic and the government of Chicago.

### Cleaning and manipulation of data

The first step was to ensure the data is prepared for analysis. Rstudio was chosen since it could handle large amounts of data with ease, as well as perform analysis. The data was downloaded from the previous attached link and into my computer. I made sure to make a copy of the .CSV files in case i need the original data.The first step was to load several libraries to help wrangle the data and visualize it.

```{r}
library(tidyverse) #helps wrangle data
library(lubridate) #helps wrangle date attributes
library(ggplot2) #helps visualize data
library(dplyr)
```

After that, the Divvy datasets (csv files) were uploaded here:

```{r}
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv") 
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv") 
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv") 
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
```

Next, the column names in each of the files were compared using the following function:

```{r}
colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2019) 
colnames(q1_2020)
```

Since not all columns were the same, the following function was used to rename columns and make them consistent with those of q1_2020

```{r}
(q4_2019 <- rename(q4_2019 ,ride_id = trip_id
                   ,rideable_type = bikeid
                   ,started_at = start_time
                   ,ended_at = end_time 
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))
(q3_2019 <- rename(q3_2019 ,ride_id = trip_id
                   ,rideable_type = bikeid
                   ,started_at = start_time
                   ,ended_at = end_time 
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))
(q2_2019 <- rename(q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID" 
                   ,started_at = "01 - Rental Details Local Start Time" 
                   ,ended_at = "01 - Rental Details Local End Time" 
                   ,start_station_name = "03 - Rental Start Station Name" 
                   ,start_station_id = "03 - Rental Start Station ID" 
                   ,end_station_name = "02 - Rental End Station Name" 
                   ,end_station_id = "02 - Rental End Station ID" 
                   ,member_casual = "User Type"))
```

Once all columns were compatible, the dataframes were inspected to look for incongruencies:

```{r}
head(q1_2020)
head(q4_2019)
head(q3_2019)
head(q2_2019)
```

After, ride_id, rideable_type, started_at and ended_at columns were converted to character type so they could stack correctly.

```{r}
q4_2019 <- mutate(q4_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type)) 
q3_2019 <- mutate(q3_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type)) 
q2_2019 <- mutate(q2_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type))
```

```{r}
head(q1_2020)
head(q4_2019)
head(q3_2019)
head(q2_2019)
```

The next step was to stack individual quarter's dataframes into one big dataframe.

```{r}
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)
```

```{r}
head(all_trips)
```

Once there was only one big dataframe, **lat**, **long**, **birthyear**, and **gender fields** were removed since they weren't of relevance for the analysis.

```{r}
all_trips <- all_trips %>%
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))
```

```{r}
head(all_trips)
```

After creating the new table, a series of functions were used to inspect and clean up the data.

```{r}
colnames(all_trips) #List of column names
nrow(all_trips) #How many rows are in data frame?
dim(all_trips) #Dimensions of the data frame?
head(all_trips) #See the first 6 rows of data frame. 
tail(all_trips) #See the last 6 rows of data.
str(all_trips) #See list of columns and data types (numeric, character, etc) 
summary(all_trips) #Statistical summary of data. Mainly for numerics
```

```{r}
all_trips <- all_trips %>%
mutate(member_casual = recode(member_casual 
                    ,"Subscriber" = "member"
                    ,"Customer" = "casual"))
```

```{r}
head(all_trips)
```

```{r}
table(all_trips$member_casual)
```

Next, columns were added that listed the date, month, day and year of each ride.

```{r}
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd 
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
```

Then the ride length was calculated to all_trips in seconds.

```{r}
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
```

```{r}
str(all_trips)
```

After, "ride_length" was converted from factor to numeric so calculations could be run on the data

```{r}
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length)) 
is.numeric(all_trips$ride_length)
```

Data was removed when bikes were taken out of docks or ride length was negative and a new version of the dataframe was created.

```{r}
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
```

### Analysis summary

The first step in the analysis phase was to obtain a statistic summary on ride_length:

```{r}
summary(all_trips_v2$ride_length)
```

Then members and casual users were compared:

```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean) 
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median) 
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max) 
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
```

Next, we found out the average ride time by each day for members vs casual users:
```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
```

Then we wanted to discover the average ride time by each month between both types of users:
```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$month, FUN = mean)
```

We noticed that the days of the week were out of order, so we used the following function to fix it:
```{r}
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
```

After, the average ride time each day for both users was found:
```{r}
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
```

Then we wanted to analyze ridership by type and weekday:
```{r}
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>% #creates weekday field using wday()
  group_by(member_casual, weekday) %>% #groups by usertype and weekday
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
            arrange(member_casual, weekday)
```

### Visualizations

After analyzing and gaining insights, the number of rides by rider type was visualized in a bar chart as following:
```{r}
all_trips_v2 %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()                                                                                                      
            ,average_duration = mean(ride_length)) %>% 
            arrange(member_casual, weekday) %>%
            ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) + geom_col(position = "dodge")
```
```{r echo=FALSE, out.width="%100"}
knitr::include_graphics("cyclistic_chart",error=FALSE)
```

A visualization for average duration was also created with another bar chart:
```{r}
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
     ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday) %>%
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) + geom_col(position = "dodge")
